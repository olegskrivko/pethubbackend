"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta
from dotenv import load_dotenv
import dj_database_url

# Prod .env in Render
if os.path.exists("/etc/secrets/.env"):
    load_dotenv("/etc/secrets/.env")
else:
    load_dotenv()  # local .env

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# For development, you can allow all origins (not recommended for production)
CORS_ALLOW_ALL_ORIGINS = False  # Set to False for production

# Or restrict to specific domains
CORS_ALLOWED_ORIGINS = [
    "https://pawclix.netlify.app",
    "http://localhost:3000",
    "http://localhost:5173",
    "https://pawclix.com",
    "https://www.pawclix.com",
]

#CORS_ALLOW_ALL_ORIGINS = True  # ✅ For development only
CORS_ALLOW_CREDENTIALS = True  # ✅ Required when sending JWT in headers (or using cookies)


CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',  # ✅ Must be here to allow JWT in Authorization header
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'access-control-allow-origin',
    'access-control-allow-headers',
    'access-control-allow-methods',
]

CORS_ALLOW_METHODS = [
    'GET',
    'POST',
    'PUT',
    'PATCH',
    'DELETE',
    'OPTIONS'
]

CORS_EXPOSE_HEADERS = [
    'authorization',  # Optional: only needed if you expect to read it in JavaScript
    'x-csrftoken',
    'content-type',
    'access-control-allow-origin',
    'access-control-allow-headers',
    'access-control-allow-methods',
]

# Additional CORS settings
CORS_PREFLIGHT_MAX_AGE = 86400  # 24 hours
#CORS_REPLACE_HTTPS_REFERER = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Installed APPs
    'corsheaders',
    'rest_framework',
    'webpush',
    'cloudinary',
    'cloudinary_storage',
    'django_filters',

    # Custom APPs
    'authentication',
    'accounts',
    'articles',
    'chatbot',
    'feedback',
    'notifications',
    'payment',
    'pets',
    'services',
    'shelters',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', # Handles CORS headers
    'whitenoise.middleware.WhiteNoiseMiddleware', 

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# DATABASES = {
#     'default': dj_database_url.parse(os.getenv("DATABASE_URL"), conn_max_age=600)
# }

DATABASES = {
    'default': {
        'ENGINE': os.getenv("DATABASES_ENGINE"),
        'NAME': os.getenv("DATABASES_NAME"),
        'USER': os.getenv("DATABASES_USER"),
        'PASSWORD': os.getenv("DATABASES_PASSWORD"),
        'HOST': os.getenv("DATABASES_HOST"),
        'PORT': os.getenv("DATABASES_PORT"),
        'OPTIONS': {
            'sslmode': 'require',                       
        },
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'lv'

TIME_ZONE = 'Europe/Riga'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

STATIC_ROOT = BASE_DIR / 'staticfiles'

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Media files settings
# MEDIA_URL is the base URL to serve media files (e.g. user uploads)

MEDIA_URL = '/media/'

# MEDIA_ROOT is the filesystem path where uploaded media files are stored

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Django REST Framework settings
# Configures the default authentication to use JWT tokens

REST_FRAMEWORK = {
    
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',  # Enables Django filters for your API
        'rest_framework.filters.OrderingFilter',  # Allows ordering of results via query parameters
        'rest_framework.filters.SearchFilter',  # Enables search functionality for your API
    ],
    # JWT Authentication only for protected endpoints
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    # Default permission policy: deny all, enable per-view exceptions
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
        #'rest_framework.permissions.AllowAny',  # ← TEMPORARY: disables global auth
    ),
}

# Custom user model for authentication
AUTH_USER_MODEL = 'authentication.CustomUser'


EMAIL_BACKEND = os.getenv("EMAIL_BACKEND")
EMAIL_HOST = os.getenv("EMAIL_HOST")
EMAIL_PORT = os.getenv("EMAIL_PORT")
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS")
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# Simple JWT settings
# Configure JWT token behavior for authentication

SIMPLE_JWT = {
    # Access token lifetime: short-lived for better security (minutes=15)
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    # Refresh token lifetime: allows user to get new access tokens (days=7)
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    # Enable rotating refresh tokens: issue a new refresh token on each refresh
    'ROTATE_REFRESH_TOKENS': True,
    # Blacklist old refresh tokens after rotation to prevent reuse
    'BLACKLIST_AFTER_ROTATION': True,
    # Algorithm used to sign the tokens (default: 'HS256')
    'ALGORITHM': 'HS256',
    # Secret key used for signing (default: settings.SECRET_KEY)
    'SIGNING_KEY': SECRET_KEY,
    # Authorization header prefix (default: ('Bearer',))
    'AUTH_HEADER_TYPES': ('Bearer',),
    # User ID field to include in token payload (default: 'id')
    'USER_ID_FIELD': 'id',
}

# https://console.upstash.com/

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "rediss://:AUXOAAIjcDE0NmI4NmM2MGI2ZDY0ZmYyYmI1ZWFmMTQ5M2VlNjRlY3AxMA@precise-baboon-17870.upstash.io:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "SSL": True,
        }
    }
}

# Use Cloudinary for storing uploaded media instead of the local filesystem
DEFAULT_FILE_STORAGE = "cloudinary_storage.storage.MediaCloudinaryStorage"

# Cloudinary credentials from environment variables
CLOUDINARY_STORAGE = {
    'CLOUD_NAME': os.getenv("CLOUDINARY_CLOUD_NAME"),
    'API_KEY': os.getenv("CLOUDINARY_API_KEY"),
    'API_SECRET': os.getenv("CLOUDINARY_API_SECRET"),
}

# Retrieve Stripe keys and webhook secret from environment variables
STRIPE_SECRET_KEY = os.getenv("STRIPE_SECRET_KEY")
STRIPE_PUBLIC_KEY = os.getenv("STRIPE_PUBLIC_KEY")
STRIPE_WEBHOOK_SECRET = os.getenv("STRIPE_WEBHOOK_SECRET")
#STRIPE_SUBSCRIPTION_PRICE_ID = os.getenv("STRIPE_SUBSCRIPTION_PRICE_ID")

STRIPE_SUBSCRIPTION_PRICE_IDS = {
    'plus': os.getenv('STRIPE_PLUS_PRICE_ID'), # Your Plus tier price ID
    'premium': os.getenv('STRIPE_PREMIUM_PRICE_ID') # Your Premium tier price ID
}

# Base URL of this backend API (e.g., used in serializers or templates)
API_BASE_URL = os.getenv("API_BASE_URL")

# URL of the frontend app (e.g., for email links or redirects)
DOMAIN_APP_URL = os.getenv("DOMAIN_APP_URL")

# Web Push config using VAPID keys and admin email from environment variables
WEBPUSH_SETTINGS = {
    "VAPID_PUBLIC_KEY": os.getenv("VAPID_PUBLIC_KEY"),
    "VAPID_PRIVATE_KEY": os.getenv("VAPID_PRIVATE_KEY"),
    "VAPID_ADMIN_EMAIL": os.getenv("VAPID_ADMIN_EMAIL"),
}

